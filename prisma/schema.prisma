generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Group {
  id        Int      @id @default(autoincrement()) // Numeric group id (internal)
  groupNumber Int   @unique // Displayed group number, assigned manually
  category  GroupCategory @default(CS_BSC_MENG) // Group category
  mentor    User?    @relation("MentorGroup", fields: [mentorId], references: [id])
  mentorId  String?  @unique
  mentees   User[]   @relation("MenteeGroup")
  info      String?  // Optional: group resources/info
  groupChatLink String?  // Optional: group chat link (Discord, WhatsApp, etc.)

  // Session relations
  mentoringSessions MentoringSession[]

  @@map("groups")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  upi         String   @unique
  studentId   String?
  staffId     String?
  department  String
  role        Role     @default(STUDENT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profilePic  String?  // URL or path to profile picture
  calendarToken String? @unique // Unique token for calendar feed

  // Session management
  sessions    Session[]
  onboarding  Onboarding?

  // Group relations
  mentorGroup Group?   @relation("MentorGroup")
  menteeOf    Group?   @relation("MenteeGroup", fields: [menteeGroupId], references: [id])
  menteeGroupId Int?

  // Mentoring session relations
  hostedSessions MentoringSession[] @relation("SessionMentor")
  sessionAttendances SessionAttendance[]

  // Announcement relations
  announcements Announcement[]
  announcementSeens AnnouncementSeen[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model MentoringSession {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   DateTime? // Session start time
  endTime     DateTime? // Session end time
  location    String
  isPublic    Boolean  @default(false) // true for public sessions, false for group-only
  category    GroupCategory // Session category based on group
  maxCapacity Int?     // Optional capacity limit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  mentor      User     @relation("SessionMentor", fields: [mentorId], references: [id])
  mentorId    String
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     Int
  attendances SessionAttendance[]

  @@map("mentoring_sessions")
}

model SessionAttendance {
  id        String   @id @default(cuid())
  status    AttendanceStatus @default(REGISTERED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  session   MentoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([sessionId, userId])
  @@map("session_attendances")
}

model Onboarding {
  id            String   @id @default(cuid())
  userId        String   @unique
  name          String
  degreeProgramme String
  gender        String
  studiedCS     Boolean
  yearsExperience Int
  quizAnswers   Json
  skillScore    Int
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  seenBy      AnnouncementSeen[]
}

model AnnouncementSeen {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  seenAt         DateTime @default(now())

  @@unique([userId, announcementId])
}

enum Role {
  STUDENT
  MENTOR
  SENIOR_MENTOR
  ADMIN
  SUPERADMIN
}

enum GroupCategory {
  CS_BSC_MENG         // Computer Science BSc/MEng
  ROBOTICS_AI_MENG    // Robotics and AI MEng
  CS_MATHS_MENG       // CS and Mathematics MEng
}

enum AttendanceStatus {
  REGISTERED
  ATTENDED
  ABSENT
  CANCELLED
}